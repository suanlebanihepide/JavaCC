/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MyNewGrammar)
package parser;
import util.*;
import ui.*;
import java.util.Iterator;
import java.util.ArrayList;


public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  public QTList qtList = new QTList();

  public  boolean isError = false;

  public nodeList nodelist = new nodeList();


  public ArrayList < String > listError = new ArrayList < String > ();

  public void printQTList()
  {
    qtList.printQTTable();
  }

  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    MyNewGrammar parser = new MyNewGrammar(System.in);
    Token token = new Token();
    //  token=parser.getNextToken();
    //    while(token!=null) {
    //      System.out.println(token.kind+" "+token.image);
    //       token=parser.getNextToken();
    //      }
    try
    {
      SimpleNode n = parser.Start();
      n.dump("");
      System.out.println("Thank you.");
      parser.printQTList();
      Iterator<node> itr2 =  parser.nodelist.Nodelist.iterator();
							while (itr2.hasNext()) {
								node tmp = (node) itr2.next();
							System.out.print(tmp.toString());
								
								System.out.print("2");
					
							}
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
   
//      isError=true;
//      listError.add(e.getMessage());
    }
  }
}

PARSER_END(MyNewGrammar)

TOKEN : /*Keywords*/
{
  < MAIN : "main" >
| < RETURN : "return" >
| < FOR : "for" >
| 	< WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < TRUE : "true" >
| < FALSE : "flase" >
| < BREAK : "break" >
| < SWITCH : "switch" >
| < CASE : "case" >
| < VOID : "void" >
| < AND : "&&" >
| < OR : "||" >
| < CONTINUE : "continue" >
| < DEFAULT1 : "default" >
}

TOKEN : /*data type*/
{
  < INT : "int" >
| < DOUBLE : "double" >
| < FLOAT : "float" >
| < STRING : "string" >
| < CHAR : "char" >
| < DO : "do" >
}

TOKEN : /*fu_hao*/
{
  < FEN : ";" >
| < DOU : "," >
| < MAO : ":" >
}

TOKEN : /*operators*/
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| 	< ZENG : "++" >
| < JIAN : "--" >
}

TOKEN : /*kuo_hao*/
{
  < ZH : "{" >
| < YH : "}" >
| < DY : ">" >
| < XY : "<" >
| < EQ : "==" >
| < NE : "!=" >
| < ZK : "(" >
| < ZM : "[" >
| < YM : "]" >
| < YK : ")" >
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
TOKEN : /* FLOAT */
{
  < FLOAT_NUM :
    [ "1"-"9" ] ([ "0"-"9" ])* "." ([ "0"-"9" ])*
  | "0." ([ "0"-"9" ])* 
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  main_fun()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void main_fun() :
{/*@bgen(jjtree) main_fun */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN_FUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main_fun */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    funSatement()
  )*
  (
    < VOID >
  | < INT >
  )
  < MAIN > < ZK > < YK > < ZH >
  (
    statementBlock()
  )*
  < YH >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funSatement() :
{/*@bgen(jjtree) funSatement */
SimpleNode jjtn000 = new SimpleNode(JJTFUNSATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token id;
 }
{/*@bgen(jjtree) funSatement */
  try {
/*@egen*/
  Type() Identifier() < ZK >
  (
    Type() Identifier()
    (
      "," Type() Identifier()
    )*
  )?
  < YK > 
  < ZH >
  (
    statementBlock()
  )*
  < YH >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Type() :
{/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  t = < INT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < DOUBLE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < FLOAT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < STRING >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < CHAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }
| t = < VOID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declearStatement() :
{/*@bgen(jjtree) declearStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLEARSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  Token exp = null;
  Token type;
  String e1 = null;
}
{/*@bgen(jjtree) declearStatement */
  try {
/*@egen*/
  type = Type() id = Identifier()
  {
    if (!nodelist.isEmpty() && nodelist.isExist(id.image))
    {
      isError = true;
      System.out.println("\u53d8\u91cf" + id.image + "\u91cd\u590d\u58f0\u660e,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
      listError.add("\u53d8\u91cf" + id.image + "\u91cd\u590d\u58f0\u660e,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
    }
    else
    {
      nodelist.addnode(type.image, id.image,id.endLine,id.endColumn);
    }			
  }
  (
    exp = < ASSIGN > e1 = Expression()
    {
      QTInfo info = new QTInfo(exp.image, e1, "_", id.image);
      qtList.addQTInfo(info);
    }
  )?
  (
    "," id = Identifier()
    {
      if (	!nodelist.isEmpty() && nodelist.isExist(id.image))
      {
        isError = true;
        System.out.println("\u53d8\u91cf" + id.image + "\u91cd\u590d\u58f0\u660e,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
        listError.add("\u53d8\u91cf" + id.image + "\u91cd\u590d\u58f0\u660e,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
      }
      else
      {
        nodelist.addnode(type.image, id.image,id.endLine,id.endColumn);
      }
    }
    (
      exp = < ASSIGN > e1 = Expression()
      {
        QTInfo info = new QTInfo(exp.image, e1, "_", id.image);
        qtList.addQTInfo(info);
      }
    )?
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void assignStatement() :
{/*@bgen(jjtree) assignStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  String exp;
  Token e1;
}
{/*@bgen(jjtree) assignStatement */
  try {
/*@egen*/
  id = Identifier() e1 = < ASSIGN > 
  exp = Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
		if(nodelist.isExist(id.image)==false)
		{
		  
        isError = true;
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
        listError.add("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
    }
    
    QTInfo qt = new QTInfo(e1.image, exp, "_", id.image);
    qtList.addQTInfo(qt);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue orExpression() :
{/*@bgen(jjtree) orExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1;
  ConditionValue c2;
}
{/*@bgen(jjtree) orExpression */
  try {
/*@egen*/
  c1 = andExpression()
  {
    c2 = c1;
  }
  (
    "||"
    {
      c1.backpatchFalseChain(QTInfo.size + 1);
    }
    c2 = andExpression()
    {
      c2.mergeTrue(c1);
      c1 = c2;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return c2;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue andExpression() :
{/*@bgen(jjtree) andExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue e1, e2 = null;
  Token rop = null;
}
{/*@bgen(jjtree) andExpression */
  try {
/*@egen*/
  e1 = NoBOOLExpression()
  {
    e2 = e1;
  }
  (
    rop = < AND >
    {
      e1.backpatchTrueChain(QTInfo.size + 1);
    }
    e2 = NoBOOLExpression()
    {
      e2.mergeFalse(e1);
      e1 = e2;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return e2;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u903b\u8f91\u975e
ConditionValue NoBOOLExpression() :
{/*@bgen(jjtree) NoBOOLExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNOBOOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue c1;
  ConditionValue c2 = new ConditionValue();
  boolean flag = true;
}
{/*@bgen(jjtree) NoBOOLExpression */
  try {
/*@egen*/
  ("!"
  {
    flag = false;
  }
  )? 
  c1 = relExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (!flag)
    {
      c2.trueChain = c1.falseChain;
      c2.falseChain = c1.trueChain;
      return c2;
    }
    return c1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue relExpression() :
{/*@bgen(jjtree) relExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTRELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String e1, e2 = null;
  Token rop = null;
  ConditionValue chain = new ConditionValue();
}
{/*@bgen(jjtree) relExpression */
  try {
/*@egen*/
  e1 = Expression()
  (
    (
      rop = < DY >
    | rop = < XY >
    | rop = < EQ >
    | rop = < NE >
    )
    e2 = Expression()
  )?
  {
    if (rop != null)
    {
      QTInfo info = new QTInfo("J" + rop, e1, e2, "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    else
    {
      QTInfo info = new QTInfo("JNZ", e1, "_", "T");
      qtList.addQTInfo(info);
      chain.mergeTrue(info);
    }
    QTInfo info = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(info);
    chain.mergeFalse(info);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return chain;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ifStatement() :
{/*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain;
  int tmark;
  int fmark;
}
{/*@bgen(jjtree) ifStatement */
  try {
/*@egen*/
  < IF > < ZK >
  (
    chain = orExpression()
  )
  {
    chain.backpatchTrueChain(QTInfo.size + 1);
  }
  < YK > 
  statementBlock()
  {
    fmark = QTInfo.size + 1;
  }
  (
    LOOKAHEAD(1)
    < ELSE >
    {
      QTInfo info = new QTInfo("J", "_", "_", 0);
      qtList.addQTInfo(info);
      chain.backpatchFalseChain(QTInfo.size + 1);
      fmark++;
    }
    statementBlock()
    {
      info.setResult(QTInfo.size + 1);
    }
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    chain.backpatchFalseChain(fmark);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AutoAdd() :
{/*@bgen(jjtree) AutoAdd */
  SimpleNode jjtn000 = new SimpleNode(JJTAUTOADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token id;
  Token op;
  String temp;
}
{/*@bgen(jjtree) AutoAdd */
  try {
/*@egen*/
  (
    id = Identifier()
    {
		if(nodelist.isExist(id.image)==false)
		{
		  
        isError = true;
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
        listError.add("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
    }
    }
    (
      op = < ZENG >/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        temp = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo("+", id.image, "1", temp));
        qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
      }
    | op = < JIAN >/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        temp = VariableNameGenerator.genVariableName();
        qtList.addQTInfo(new QTInfo("-", id.image, "1", temp));
        qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
      }
    )
  )
|
  (
    op = < ZENG >
  | op = < JIAN >
     id = Identifier()
    {
      if(nodelist.isExist(id.image)==false)
		{
		  
        isError = true;
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
        listError.add("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
    }
     }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      temp = VariableNameGenerator.genVariableName();
      qtList.addQTInfo(new QTInfo("+", id.image, "1", temp));
      qtList.addQTInfo(new QTInfo("=", temp, "_", id.image));
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void whileStatement() :
{/*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int quad;
}
{/*@bgen(jjtree) whileStatement */
  try {
/*@egen*/
  < WHILE > "("
  {
    quad = QTInfo.size + 1;
    ;
  }
  (
    chain = orExpression()
  )
  ")"
  {
    chain.backpatchTrueChain(QTInfo.size + 1);
  }
  statementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    chain.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forStatement() :
{/*@bgen(jjtree) forStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain;
  int e1, e2 = 0;
}
{/*@bgen(jjtree) forStatement */
  try {
/*@egen*/
  < FOR > < ZK >
  (
    declearStatement() ";"
  | assignStatement() ";"
  )
  {
    e1 = QTInfo.size + 1;
  }
  chain = relExpression() ";"
  {
    e2 = QTInfo.size + 1;
  }
  (
    LOOKAHEAD(2)
    AutoAdd()
    {
      qtList.addQTInfo(new QTInfo("J", "_", "_", e1));
    }
  | assignStatement()
  )+
  < YK >
  {
    chain.backpatchTrueChain(QTInfo.size + 1);
  }
  statementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtList.addQTInfo(new QTInfo("J", "_", "_", e2));
    chain.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void doWhileStatement() :
{/*@bgen(jjtree) doWhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue chain = null;
  int quad;
}
{/*@bgen(jjtree) doWhileStatement */
  try {
/*@egen*/
  < DO > < ZH >
  {
    quad = QTInfo.size + 1;
  }
  statementBlock() 
  < YH > 
  < WHILE > "(" chain = orExpression() ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    chain.backpatchTrueChain(quad);
    chain.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad;
  int quad1;
  String str;
  String t;
}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  < SWITCH > "(" 
  str = Expression() ")" 
  "{"
  (
    < CASE > 
    t = Expression() 
    ":"
    {
      quad = QTInfo.size + 1;
    }
    {
      quad++;
      //\u5339\u914d
      QTInfo info = new QTInfo("case:", str, t, quad);
      qtList.addQTInfo(info);
    }
    (
      statementBlock()
    )*
  )*
  < DEFAULT1 > ":"
  {
    quad1 = QTInfo.size + 1;
  }
  {
    //\u5339\u914d\u5931\u8d25
    quad1++;
    QTInfo info = new QTInfo("case", str, "default", quad1);
    qtList.addQTInfo(info);
  }
  statementBlock() 
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement() :
{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
  try {
/*@egen*/
  declearStatement() < FEN >
|
  (
    assignStatement()
  )?
  < FEN >
| ifStatement()
| whileStatement()
| forStatement()
| SwitchStatement()
| doWhileStatement() < FEN >
| < BREAK > < FEN >
| < CONTINUE > < FEN >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


} 

void statementBlock() :
{/*@bgen(jjtree) statementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementBlock */
  try {
/*@egen*/
  (
    statement()
  )
| 	"{"
  (
    statementBlock()
  )*
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  str = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first = null;
  String middle = null;
  String newTemp = null;
  Token op = null;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  first = MultiplicativeExpression()
  {
    newTemp = first;
  }
  (
    (
      op = "+"
    | op = "-"
    )
    middle = MultiplicativeExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first;
  String middle;
  String newTemp = null;
  Token op;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  first = UnaryExpression()
  {
    newTemp = first;
  }
  (
    (
      op = "*"
    | op = "/"
    | op = "%"
    )
    middle = UnaryExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(op.image, first, middle, newTemp);
      qtList.addQTInfo(qt);
      first = newTemp;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str;
  Token id;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
    "(" str = Expression() ")"
  |
    (
      id = Identifier()
      {
		 if(nodelist.isExist(id.image)==false)
		{
		  
        isError = true;
        System.out.println("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
        listError.add("\u53d8\u91cf" + id.image + "\u672a\u5b9a\u4e49,\u9519\u8bef\u5728" + id.endLine + "\u884c," + id.endColumn + "\u5217");
    }
    
        }
    )
    {
      str = id.image;
    }
  | str = Integer()
  |  id=< FLOAT_NUM >
	{
	  str=id.image;
	}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  {
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Integer() :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
