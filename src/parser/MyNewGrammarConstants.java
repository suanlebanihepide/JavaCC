/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 1;
  /** RegularExpression Id. */
  int RETURN = 2;
  /** RegularExpression Id. */
  int FOR = 3;
  /** RegularExpression Id. */
  int WHILE = 4;
  /** RegularExpression Id. */
  int IF = 5;
  /** RegularExpression Id. */
  int ELSE = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int FALSE = 8;
  /** RegularExpression Id. */
  int BREAK = 9;
  /** RegularExpression Id. */
  int SWITCH = 10;
  /** RegularExpression Id. */
  int CASE = 11;
  /** RegularExpression Id. */
  int VOID = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int DEFAULT1 = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int DOUBLE = 18;
  /** RegularExpression Id. */
  int FLOAT = 19;
  /** RegularExpression Id. */
  int STRING = 20;
  /** RegularExpression Id. */
  int CHAR = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int FEN = 23;
  /** RegularExpression Id. */
  int DOU = 24;
  /** RegularExpression Id. */
  int MAO = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int MINUS = 27;
  /** RegularExpression Id. */
  int MULTIPLY = 28;
  /** RegularExpression Id. */
  int DIVIDE = 29;
  /** RegularExpression Id. */
  int ASSIGN = 30;
  /** RegularExpression Id. */
  int ZENG = 31;
  /** RegularExpression Id. */
  int JIAN = 32;
  /** RegularExpression Id. */
  int ZH = 33;
  /** RegularExpression Id. */
  int YH = 34;
  /** RegularExpression Id. */
  int DY = 35;
  /** RegularExpression Id. */
  int XY = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int NE = 38;
  /** RegularExpression Id. */
  int ZK = 39;
  /** RegularExpression Id. */
  int ZM = 40;
  /** RegularExpression Id. */
  int YM = 41;
  /** RegularExpression Id. */
  int YK = 42;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 49;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 50;
  /** RegularExpression Id. */
  int HEX_LITERAL = 51;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 52;
  /** RegularExpression Id. */
  int FLOAT_NUM = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"main\"",
    "\"return\"",
    "\"for\"",
    "\"while\"",
    "\"if\"",
    "\"else\"",
    "\"true\"",
    "\"flase\"",
    "\"break\"",
    "\"switch\"",
    "\"case\"",
    "\"void\"",
    "\"&&\"",
    "\"||\"",
    "\"continue\"",
    "\"default\"",
    "\"int\"",
    "\"double\"",
    "\"float\"",
    "\"string\"",
    "\"char\"",
    "\"do\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"++\"",
    "\"--\"",
    "\"{\"",
    "\"}\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"!=\"",
    "\"(\"",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 47>",
    "<token of kind 48>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOAT_NUM>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"!\"",
    "\"%\"",
  };

}
